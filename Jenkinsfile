pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'snezhok99'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SWARM_STACK_NAME = 'app'
        DB_SERVICE = 'app_db'
        DB_USER = 'root'
        DB_PASSWORD = 'secret'
        DB_NAME = 'lena'
        FRONTEND_URL = 'http://localhost:8080' // —É–∫–∞–∂–∏ IP, –µ—Å–ª–∏ Jenkins –Ω–∞ –¥—Ä—É–≥–æ–π –º–∞—à–∏–Ω–µ
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKER_CREDENTIALS_ID,
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    script {
                        sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'

                        // –°–±–æ—Ä–∫–∞
                        sh "docker build -f php.Dockerfile -t ${DOCKER_USERNAME}/${SWARM_STACK_NAME}-web:latest ."
                        sh "docker build -f mysql.Dockerfile -t ${DOCKER_USERNAME}/${SWARM_STACK_NAME}-db:latest ."

                        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è
                        sh "docker push ${DOCKER_USERNAME}/${SWARM_STACK_NAME}-web:latest"
                        sh "docker push ${DOCKER_USERNAME}/${SWARM_STACK_NAME}-db:latest"
                    }
                }
            }
        }

        stage('Deploy to Docker Swarm') {
            steps {
                script {
                    sh "docker stack deploy --with-registry-auth -c docker-compose.yaml ${SWARM_STACK_NAME}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo '‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...'
                    sleep time: 30, unit: 'SECONDS'

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...'
                    sh """
                        curl -fsS ${FRONTEND_URL}  {
                            echo '‚ùå –§—Ä–æ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!'
                            exit 1
                        }
                    """

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...'
                    def dbContainerId = sh(
                        script: "docker ps --filter 'name=${SWARM_STACK_NAME}_${DB_SERVICE}' --format '{{.ID}}'",
                        returnStdout: true
                    ).trim()

                    if (!dbContainerId) {
                        error("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    }

                    echo 'üß™ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...'
                    sh """
                        docker exec ${dbContainerId} \
                        mysql -u${DB_USER} -p${DB_PASSWORD} -e 'SELECT 1;'  exit 1
                    """

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...'
                    sh """
                        docker exec ${dbContainerId} \
                        mysql -u${DB_USER} -p${DB_PASSWORD} -e 'USE ${DB_NAME}; SHOW TABLES;' || exit 1
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'
        }
        failure {
            echo '‚ùå –°–±–æ—Ä–∫–∞ –∏–ª–∏ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤—ã—à–µ.'
        }
        always {
            cleanWs()
        }
    }
}
