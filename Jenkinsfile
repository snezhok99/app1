pipeline {
    agent any

    environment {
        SWARM_STACK_NAME = 'app'
        DB_SERVICE = 'app_db'
        DB_USER = 'root'
        DB_PASSWORD = 'secret'
        DB_NAME = 'lena'
        FRONTEND_URL = 'http://192.168.0.1:8080'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // –°–±–æ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Docker-–æ–±—Ä–∞–∑–æ–≤
                    sh "docker build -f php.Dockerfile -t app-web:latest ."
                    sh "docker build -f mysql.Dockerfile -t app-db:latest ."
                }
            }
        }

        stage('Deploy to Docker Swarm') {
            steps {
                script {
                    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ swarm –∞–∫—Ç–∏–≤–µ–Ω
                    sh '''
                        if ! docker info | grep -q "Swarm: active"; then
                            docker swarm init  true
                        fi
                    '''

                    // –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ docker stack
                    sh "docker stack deploy --with-registry-auth -c docker-compose.yaml ${SWARM_STACK_NAME}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...'
                    sleep time: 30, unit: 'SECONDS'

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–∞...'
                    sh """
                        if ! curl -fsS ${FRONTEND_URL}; then
                            echo '‚ùå –§—Ä–æ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!'
                            exit 1
                        fi
                    """

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...'
                    def dbContainer = sh(
                        script: "docker ps --filter name=${SWARM_STACK_NAME}_${DB_SERVICE} --format '{{.ID}}'",
                        returnStdout: true
                    ).trim()

                    if (!dbContainer) {
                        error("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    }

                    echo 'üß™ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...'
                    sh """
                        docker exec ${dbContainer} mysql -u${DB_USER} -p${DB_PASSWORD} -e 'SELECT 1;'  exit 1
                    """

                    echo 'üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'
                    sh """
                        docker exec ${dbContainer} \
                        mysql -u${DB_USER} -p${DB_PASSWORD} -e 'USE ${DB_NAME}; SHOW TABLES;' || exit 1
                    """
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!'
        }
        failure {
            echo '‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤—ã—à–µ.'
        }
        always {
            cleanWs()
        }
    }
}
